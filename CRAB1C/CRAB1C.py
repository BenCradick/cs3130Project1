from timeit import default_timer as time_current
##Copy of CRAB1A/B

ITERATIONS = 1
def fibonacci_iterative(k) :
    penultimate = 0
    last = 0
    current = 1
    while( k > 1 ):
        penultimate = last
        #Calculate next fibonacci number in sequence F(n-2)+F(n-1)
        last = current
        ##Temporary numbers
        current = last + penultimate
        ##Assign F(n) to F(n-1)
        
        #print(k, current)
        ##decrement counter
        k -= 1
    return current

def fibonacci_recursive(k) :
    if k == 1:
        return 1
    if k == 0:
        return 0
        
    return fibonacci_recursive(k-1)+ fibonacci_recursive(k-2)


results = open("CRAB1C/results.txt", "w")
print(f"N,Recursive,Iterative", file=results)

## two column matrix stores values that get generated by timeit for each value of F(n) with 1000 runs each
iterative=[0 for x in range(0,40)]
recursive=[0 for x in range(0,40)]
try:
    
    for i in range (1, 41):
            begin = time_current()
            fibonacci_iterative(i)
            end = time_current()
            time = end - begin
            #setup = f"from __main__ import Fibonacci_Numbers;FibNums=Fibonacci_Numbers({i})"
            iterative[i-1] = time

            begin = time_current()
            fibonacci_recursive(i)
            end = time_current()
            time = end - begin


            recursive[i-1] = time
except RecursionError:
    print(i,k)


for k in range (1,41): 
    rec_min = recursive[k-1]
    print(f"{k}, {rec_min}, {iterative[k-1]}", file=results)